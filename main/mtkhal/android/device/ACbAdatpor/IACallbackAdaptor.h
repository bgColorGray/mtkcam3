/* Copyright Statement:
 *
 * This software/firmware and related documentation ("MediaTek Software") are
 * protected under relevant copyright laws. The information contained herein is
 * confidential and proprietary to MediaTek Inc. and/or its licensors. Without
 * the prior written permission of MediaTek inc. and/or its licensors, any
 * reproduction, modification, use or disclosure of MediaTek Software, and
 * information contained herein, in whole or in part, shall be strictly
 * prohibited.
 *
 * MediaTek Inc. (C) 2010. All rights reserved.
 *
 * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
 * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
 * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER
 * ON AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL
 * WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR
 * NONINFRINGEMENT. NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH
 * RESPECT TO THE SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY,
 * INCORPORATED IN, OR SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES
 * TO LOOK ONLY TO SUCH THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO.
 * RECEIVER EXPRESSLY ACKNOWLEDGES THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO
 * OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES CONTAINED IN MEDIATEK
 * SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE
 * RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
 * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S
 * ENTIRE AND CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE
 * RELEASED HEREUNDER WILL BE, AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE
 * MEDIATEK SOFTWARE AT ISSUE, OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE
 * CHARGE PAID BY RECEIVER TO MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
 *
 * The following software/firmware and/or related documentation ("MediaTek
 * Software") have been modified by MediaTek Inc. All revisions are subject to
 * any receiver's applicable license agreements with MediaTek Inc.
 */

#ifndef MAIN_MTKHAL_ANDROID_DEVICE_ACBADATPOR_IACALLBACKADAPTOR_H_
#define MAIN_MTKHAL_ANDROID_DEVICE_ACBADATPOR_IACALLBACKADAPTOR_H_
//
#include <mtkcam3/main/mtkhal/android/device/3.x/IACameraDeviceCallback.h>
#include <mtkcam3/main/mtkhal/core/device/3.x/IMtkcamDeviceCallback.h>
//
#include <mtkcam/utils/metadata/IMetadataConverter.h>
#include <mtkcam/utils/metastore/IMetadataProvider.h>
#include <mtkcam/utils/debug/IPrinter.h>

#include <memory>
#include <string>
#include <vector>
#include <map>

/******************************************************************************
 *
 ******************************************************************************/
namespace mcam {
namespace android {

/**
 * An interface of App stream manager.
 */
class IACallbackAdaptor : public virtual ::android::RefBase {
  //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  //  Definitions.
  //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 public:
  struct CreationInfo {
    int32_t mInstanceId;
    std::shared_ptr<IACameraDeviceCallback> mCameraDeviceCallback;
    ::android::sp<NSCam::IMetadataProvider> mMetadataProvider;
    std::map<uint32_t, ::android::sp<NSCam::IMetadataProvider>>
        mPhysicalMetadataProviders;
    bool mSupportBufferManagement = false;
  };
  //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  //  Interfaces.
  //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 public:  ////    Operations.
  static auto create(const CreationInfo& creationInfo) -> IACallbackAdaptor*;

  /**
   * Destroy the instance.
   */
  virtual auto destroy() -> void = 0;

  /**
   * Dump debugging state.
   */
  // virtual auto dumpState(IPrinter& printer,
  //                        const std::vector<std::string>& options) -> void =
  //                        0;

  /**
   * @brief beginConfiguration
   *
   * @param rStreams : the stream configuration requested by upper layer
   *
   * @return
   *    0 indicates success; otherwise failure.
   */
  virtual auto beginConfiguration(
      const mcam::StreamConfiguration& rStreams) -> void = 0;

  /**
   * @brief endConfiguration
   *
   * @param rHalStreams : the stream configuration result generated by HAL
   *
   * @return
   *    0 indicates success; otherwise failure.
   */
  virtual auto endConfiguration(
      const mcam::HalStreamConfiguration& rHalStreams) -> void = 0;

  /**
   * Flush requests.
   *
   * @param[in] requests: the requests to flush.
   *
   */
  virtual auto flushRequest(
      const std::vector<mcam::CaptureRequest>& requests) -> void = 0;

  /**
   * Submit a set of requests.
   * This call is valid only after streams are configured successfully.
   *
   * @param[in] rRequests: a set of requests, created by CameraDeviceSession,
   *  associated with the given CaptureRequest.
   *
   * @return
   *      0 indicates success; otherwise failure.
   */
  virtual auto submitRequests(
      /*const hidl_vec<V3_4::CaptureRequest>& requests,*/
      const std::vector<mcam::CaptureRequest>& rRequests) -> int = 0;

  /**
   * Wait until all the registered requests have finished returning.
   *
   * @param[in] timeout
   */
  virtual auto waitUntilDrained(int64_t const timeout) -> int = 0;

  virtual auto processCaptureResult(
      const std::vector<mcam::CaptureResult>& mtkResults) -> void = 0;

  virtual auto notify(const std::vector<mcam::NotifyMsg>& mtkMsgs)
      -> void = 0;
};

/******************************************************************************
 *
 ******************************************************************************/
};      // namespace android
};      // namespace mcam
#endif  // MAIN_MTKHAL_ANDROID_DEVICE_ACBADATPOR_IACALLBACKADAPTOR_H_
